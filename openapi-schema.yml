openapi: 3.0.2
info:
  title: ''
  version: ''
paths:
  /api/v1/users/:
    get:
      operationId: listUsers
      description: List a queryset.
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=400&limit=100
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?offset=200&limit=100
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    post:
      operationId: createUser
      description: Create a model instance.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
  /api/v1/users/recent_users/:
    get:
      operationId: recentUsersUser
      description: 'List recent users


        GET /api/v1/users/recent_users/'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
  /api/v1/users/{id}/:
    get:
      operationId: retrieveUser
      description: Retrieve a model instance.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this user.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    put:
      operationId: updateUser
      description: Update a model instance.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this user.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateUser
      description: API endpoint that allows users to be viewed or edited.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this user.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyUser
      description: Destroy a model instance.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this user.
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/v1/accounts/profile/:
    get:
      operationId: listDefaultUserProfiles
      description: Get or set user profile.
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DefaultUserProfile'
          description: ''
      tags:
      - api
    post:
      operationId: createDefaultUserProfile
      description: Get or set user profile.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefaultUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DefaultUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DefaultUserProfile'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultUserProfile'
          description: ''
      tags:
      - api
    put:
      operationId: updateDefaultUserProfile
      description: Get or set user profile.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefaultUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DefaultUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DefaultUserProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultUserProfile'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateDefaultUserProfile
      description: Get or set user profile.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefaultUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DefaultUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DefaultUserProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultUserProfile'
          description: ''
      tags:
      - api
  /api/v1/users/{id}/set_password/:
    post:
      operationId: setPasswordUser
      description: 'Set user password


        POST /api/v1/users/:id/set_password/'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this user.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
  /api/v1/token/access/:
    post:
      operationId: createMyTokenObtainPair
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MyTokenObtainPair'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyTokenObtainPair'
          description: ''
      tags:
      - api
  /api/v1/token/refresh/:
    post:
      operationId: createTokenRefresh
      description: 'Takes a refresh type JSON web token and returns an access type
        JSON web

        token if the refresh token is valid.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
      tags:
      - api
  /api/v1/token/verify/:
    post:
      operationId: createTokenVerify
      description: 'Takes a token and indicates if it is valid.  This view provides
        no

        information about a token''s fitness for a particular use.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
      tags:
      - api
  /api/v1/accounts/register/:
    post:
      operationId: createDefaultRegisterUser
      description: Register new user.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefaultRegisterUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DefaultRegisterUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DefaultRegisterUser'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultRegisterUser'
          description: ''
      tags:
      - api
  /api/v1/accounts/verify-registration/:
    post:
      operationId: createVerifyRegistration
      description: Verify registration via signature.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyRegistration'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyRegistration'
          description: ''
      tags:
      - api
  /api/v1/accounts/send-reset-password-link/:
    post:
      operationId: createDefaultSendResetPasswordLink
      description: Send email with reset password link.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefaultSendResetPasswordLink'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DefaultSendResetPasswordLink'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DefaultSendResetPasswordLink'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultSendResetPasswordLink'
          description: ''
      tags:
      - api
  /api/v1/accounts/reset-password/:
    post:
      operationId: createResetPassword
      description: Reset password, given the signature and timestamp from the link.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetPassword'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPassword'
          description: ''
      tags:
      - api
  /api/v1/accounts/login/:
    post:
      operationId: createDefaultLogin
      description: Logs in the user via given login and password.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefaultLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DefaultLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DefaultLogin'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultLogin'
          description: ''
      tags:
      - api
  /api/v1/accounts/logout/:
    post:
      operationId: createLogout
      description: 'Logs out the user. returns an error if the user is not

        authenticated.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Logout'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Logout'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Logout'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logout'
          description: ''
      tags:
      - api
  /api/v1/accounts/change-password/:
    post:
      operationId: createChangePassword
      description: Change the user password.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePassword'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePassword'
          description: ''
      tags:
      - api
  /api/v1/accounts/register-email/:
    post:
      operationId: createDefaultRegisterEmail
      description: Register new email.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DefaultRegisterEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DefaultRegisterEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DefaultRegisterEmail'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultRegisterEmail'
          description: ''
      tags:
      - api
  /api/v1/accounts/verify-email/:
    post:
      operationId: createVerifyEmail
      description: Verify email via signature.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyEmail'
          description: ''
      tags:
      - api
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        is_superuser:
          type: boolean
          readOnly: true
        groups:
          type: array
          items:
            type: string
          readOnly: true
      required:
      - email
    DefaultUserProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          maxLength: 10
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
      required:
      - username
      - email
    MyTokenObtainPair:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - username
      - password
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
      required:
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    DefaultRegisterUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          maxLength: 10
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        password:
          type: string
          maxLength: 128
        password_confirm:
          type: string
          writeOnly: true
      required:
      - username
      - email
      - password
      - password_confirm
    VerifyRegistration:
      type: object
      properties:
        user_id:
          type: string
        timestamp:
          type: integer
        signature:
          type: string
      required:
      - user_id
      - timestamp
      - signature
    DefaultSendResetPasswordLink:
      type: object
      properties:
        login:
          type: string
      required:
      - login
    ResetPassword:
      type: object
      properties:
        user_id:
          type: string
        timestamp:
          type: integer
        signature:
          type: string
        password:
          type: string
      required:
      - user_id
      - timestamp
      - signature
      - password
    DefaultLogin:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
      - login
      - password
    Logout:
      type: object
      properties:
        revoke_token:
          type: boolean
          default: false
    ChangePassword:
      type: object
      properties:
        old_password:
          type: string
        password:
          type: string
        password_confirm:
          type: string
          writeOnly: true
      required:
      - old_password
      - password
      - password_confirm
    DefaultRegisterEmail:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    VerifyEmail:
      type: object
      properties:
        user_id:
          type: string
        email:
          type: string
          format: email
        timestamp:
          type: integer
        signature:
          type: string
      required:
      - user_id
      - email
      - timestamp
      - signature
